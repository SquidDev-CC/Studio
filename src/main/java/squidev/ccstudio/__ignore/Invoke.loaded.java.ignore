/*
switch(opcode) {
	case 0:
		instance.sayHello();
		return LuaValue.NONE;
	case 1:
		if(args.narg() < 1 || !args.arg(1).isnumber()) {
			throw new LuaError("Expected double");
		}

		return LuaValue.valueOf(instance.sayGoodbye(args.arg(1).todouble()));
}

return LuaValue.NONE;
*/

mv = cw.visitMethod(ACC_PUBLIC, "invoke", "(Lorg/luaj/vm2/Varargs;)Lorg/luaj/vm2/Varargs;", null, null);
mv.visitCode();

// switch(opcode) {
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "squidev/ccstudio/__ignore/Invoke", "opcode", "I");

Label switchHello = new Label();
Label switchGoodbye = new Label();
Label switchDefault = new Label();
mv.visitLookupSwitchInsn(switchDefault, new int[]{0, 1}, new Label[]{switchHello, switchGoodbye});

// case 0:
mv.visitLabel(switchHello);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
	// instance.sayHello();
	mv.visitVarInsn(ALOAD, 0);
	mv.visitFieldInsn(GETFIELD, "squidev/ccstudio/__ignore/Invoke", "instance", "Ljava/lang/Object;");
	mv.visitTypeInsn(CHECKCAST, "squidev/ccstudio/__ignore/Invoke$SubThing");
	mv.visitMethodInsn(INVOKEVIRTUAL, "squidev/ccstudio/__ignore/Invoke$SubThing", "sayHello", "()V", false);

	// return LuaValue.NONE;
	mv.visitFieldInsn(GETSTATIC, "org/luaj/vm2/LuaValue", "NONE", "Lorg/luaj/vm2/LuaValue;");
	mv.visitInsn(ARETURN);

// case 1:
mv.visitLabel(switchGoodbye);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);

	Label exceptionArgs = new Label();
	Label noException = new Label();

	// args.narg() < 1
	mv.visitVarInsn(ALOAD, 1);
	mv.visitMethodInsn(INVOKEVIRTUAL, "org/luaj/vm2/Varargs", "narg", "()I", false);
	mv.visitInsn(ICONST_1);
	mv.visitJumpInsn(IF_ICMPLT, exceptionArgs);

	// !args.arg(1).isnumber()
	mv.visitVarInsn(ALOAD, 1);
	mv.visitInsn(ICONST_1);
	mv.visitMethodInsn(INVOKEVIRTUAL, "org/luaj/vm2/Varargs", "arg", "(I)Lorg/luaj/vm2/LuaValue;", false);
	mv.visitMethodInsn(INVOKEVIRTUAL, "org/luaj/vm2/LuaValue", "isnumber", "()Z", false);
	mv.visitJumpInsn(IFNE, noException);

	mv.visitLabel(exceptionArgs);
	mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
		// throw new LuaError("Expected double");
		mv.visitTypeInsn(NEW, "org/luaj/vm2/LuaError");
		mv.visitInsn(DUP);
		mv.visitLdcInsn("Expected double");
		mv.visitMethodInsn(INVOKESPECIAL, "org/luaj/vm2/LuaError", "<init>", "(Ljava/lang/String;)V", false);
		mv.visitInsn(ATHROW);

	mv.visitLabel(noException);
	mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
		// return LuaValue.valueOf(instance.sayGoodbye(args.arg(1).todouble()));

		// instance.sayGoodbye
		mv.visitVarInsn(ALOAD, 0);
		mv.visitFieldInsn(GETFIELD, "squidev/ccstudio/__ignore/Invoke", "instance", "Ljava/lang/Object;");
		mv.visitTypeInsn(CHECKCAST, "squidev/ccstudio/__ignore/Invoke$SubThing");

		// args.arg(1).todouble()
		mv.visitVarInsn(ALOAD, 1);
		mv.visitInsn(ICONST_1);
		mv.visitMethodInsn(INVOKEVIRTUAL, "org/luaj/vm2/Varargs", "arg", "(I)Lorg/luaj/vm2/LuaValue;", false);
		mv.visitMethodInsn(INVOKEVIRTUAL, "org/luaj/vm2/LuaValue", "todouble", "()D", false);

		// instance.sayGoodbye(...);
		mv.visitMethodInsn(INVOKEVIRTUAL, "squidev/ccstudio/__ignore/Invoke$SubThing", "sayGoodbye", "(D)D", false);

		// LuaValue.valueOf(...)
		mv.visitMethodInsn(INVOKESTATIC, "org/luaj/vm2/LuaValue", "valueOf", "(D)Lorg/luaj/vm2/LuaNumber;", false);
		mv.visitInsn(ARETURN);

mv.visitLabel(switchDefault);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
	// return LuaValue.NONE;
	mv.visitFieldInsn(GETSTATIC, "org/luaj/vm2/LuaValue", "NONE", "Lorg/luaj/vm2/LuaValue;");
	mv.visitInsn(ARETURN);
